module type BASIC = sig
  include Names.NAME

  type term

  val string_of_term : term -> string

  type value

  val string_of_value : value -> string

  type val_env = (name, value) Util.Pmap.pmap
  type eval_ctx

  val string_of_eval_ctx : eval_ctx -> string
  val fill_hole : eval_ctx -> value -> term
  val apply_value : value -> value -> term
  val get_callback : term -> (name * value * eval_ctx) option
  val get_value : term -> value option
  val is_error : term -> bool
end

module type TYPED = sig
  include BASIC

  type typ
  type typevar
  type typename

  val string_of_type : typ -> string
  val string_of_typename : typename -> string

  type name_ctx = (name, typ) Util.Pmap.pmap

  val get_input_type : typ -> typevar list * typ
  val get_output_type : typ -> typ

  val generate_typename_subst :
    typevar list -> typename list * (typevar, typ) Util.Pmap.pmap

  val apply_type_subst : typ -> (typevar, typ) Util.Pmap.pmap -> typ
end

module type RESOURCES = sig
  type resources

  val string_of_resources : resources -> string
  val empty_resources : resources

  type resources_type_ctx

  val empty_resources_type_ctx : resources_type_ctx
  val string_of_resources_type_ctx : resources_type_ctx -> string
  val resources_type_ctx_of_resources : resources -> resources_type_ctx
  val generate_resources : resources_type_ctx -> resources list
end

module type COMP = sig
  include TYPED
  module Resources : RESOURCES

  type opconf = term * Resources.resources

  val compute_nf : opconf -> opconf option
  val get_typed_term : string -> in_channel -> term * typ * name_ctx

  (* We retrive a module declaration and its signature from the two in_channel taken as input.
     We evaluate the list of computation declarations into a list of value declarations together with the resources
     generated by this evaluation. *)
  val get_typed_val_env :
    in_channel -> in_channel -> val_env * Resources.resources * name_ctx * name_ctx
end

module type WITHNUP = sig
  include COMP

  module Nup :
    Nup.NUP with type name = name and type value = value and type typ = typ
end
