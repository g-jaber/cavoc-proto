module type WITHNUP = sig
  include Language.WITHNUP include Names.CONT_NAMES with type name := name
end

module type LANG = sig
  include Names.CONT_NAMES

  type computation

  val string_of_computation : computation -> string

  module Memory : Language.MEMORY

  type opconf = computation * Memory.memory

  (* compute_nf computes the normal form of an operational configuration,
     or None when we detect that the operational configuration diverges.*)
  val compute_nf : opconf -> opconf option

  (* Normal forms are either decomposed into glue values and the name on which the interaction happened,
     or into None when they corresponds to (uncatchable) error values. *)
  type glue_val
  type glue_type

  val decompose_nf : computation -> (name * glue_val) option

  (* Abstracted values correspond to the observable part of a value.
      They are also called ultimate patterns.
  *)
  type abstract_val

  val string_of_abstract_val : abstract_val -> string
  val names_of_abstract_val : abstract_val -> name list

  (* Interactive values are the negative part of values,
     that are not exchanged between players but rather interact on. *)
  type interactive_val

  (* Interactive types are used to type interactive values.
     Notice that they are not necessarily a subset of the types of the programming language. *)
  type interactive_type

  (* The function neg_type extract from an interactive type the type of the input arguments
     expected to interact over this type. *)
  val neg_type : interactive_type -> glue_type

  (*Interactive name contexts are typing contexts mapping names to interactive types.*)
  type name_type_ctx = (name, interactive_type) Util.Pmap.pmap

  val empty_name_type_ctx : name_type_ctx
  val string_of_name_type_ctx : name_type_ctx -> string

  (* Interactive environments γ are partial maps from names to interactive values*)
  type interactive_env

  val empty_ienv : interactive_env
  val singleton_ienv : name * interactive_val -> interactive_env
  val list_to_ienv : (name * interactive_val) list -> interactive_env
  val lookup_ienv : name -> interactive_env -> interactive_val option
  val concat_ienv : interactive_env -> interactive_env -> interactive_env
  val string_of_interactive_env : interactive_env -> string

  (* The typed focusing process implemented by abstract_glue_val
      decomposes typed glue values into:
       - an abstract value for the observable part,
       - a typed interactive environment for the negative part. *)
  val abstract_glue_val :
    glue_val -> glue_type -> abstract_val * interactive_env * name_type_ctx

  (* The typing judgment of an abstracted value Γ_P;Γ_O ⊢ A : τ ▷ Δ
     produces the interactive name contexts Δ of fresh names introduced by A.
     it returns None when the type checking fails.
     The context Γ_P is used to retrieve the existing polymorphic names, and to check for freshness other names.
     The contexts Γ_O is used to check for freshness of names *)
  val type_check_abstract_val :
    name_type_ctx ->
    name_type_ctx ->
    glue_type ->
    abstract_val ->
    name_type_ctx option

  (* From the interactive name context Γ_P and a glue type τ,
     we generate all the possible pairs (A,Δ) such that
     Γ_P;_ ⊢ A : τ ▷ Δ
     Freshness of names that appear in Δ is guaranteed by a gensym, so that we do not need to provide Γ_O. *)
  val generate_abstract_val :
    name_type_ctx -> glue_type -> (abstract_val * name_type_ctx) list

  (* From an interactive environment γ, an interactive value I and an abstract value A,
      val_composition γ I A  built the computation I ★ A{γ} *)
  val val_composition :
    interactive_env -> interactive_val -> abstract_val -> computation

  val unify_abstract_val :
    name Util.Namespan.namespan ->
    abstract_val ->
    abstract_val ->
    name Util.Namespan.namespan option

  val get_typed_computation :
    string -> in_channel -> computation * name_type_ctx

  (* The function get_typed_ienv
     retrive a module declaration and its signature from the two in_channel taken as input.
     It evaluates the list of computation declarations
     into a list of value declarations together with the memory
     generated by this evaluation. *)
  val get_typed_ienv :
    in_channel ->
    in_channel ->
    interactive_env * Memory.memory * name_type_ctx * name_type_ctx
end

module type LANG_F = functor (OpLang : WITHNUP) ->
  LANG with type name = OpLang.name
