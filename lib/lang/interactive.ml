module type WITHNUP = sig
  include Language.WITHNUP include Names.CONT_NAMES with type name := name
end

module type LANG = sig
  include Names.CONT_NAMES

  type interactive_val
  type abstract_val

  val string_of_abstract_val : abstract_val -> string
  val names_of_abstract_val : abstract_val -> name list

  type glue_val
  type computation

  val string_of_computation : computation -> string

  module Memory : Language.MEMORY

  type opconf = computation * Memory.memory

  val compute_nf : opconf -> opconf option

  type glue_type
  type interactive_type

  val neg_type : interactive_type -> glue_type

  type interactive_env

  type name_type_ctx = (name, interactive_type) Util.Pmap.pmap

  val empty_name_type_ctx : name_type_ctx
  val string_of_name_type_ctx : name_type_ctx -> string

  val generate_abstract_val :
    name_type_ctx -> glue_type -> (abstract_val * name_type_ctx) list

  val type_check_abstract_val :
    name_type_ctx ->
    name_type_ctx ->
    glue_type ->
    abstract_val ->
    name_type_ctx option

  val empty_ienv : interactive_env
  val singleton_ienv : name * interactive_val -> interactive_env
  val list_to_ienv : (name * interactive_val) list -> interactive_env
  val lookup_ienv : name -> interactive_env -> interactive_val option
  val concat_ienv : interactive_env -> interactive_env -> interactive_env
  val string_of_interactive_env : interactive_env -> string
  val decompose_nf : computation -> (name * glue_val) option

  val val_composition :
    interactive_env -> interactive_val -> abstract_val -> computation

  val abstract_glue_val :
    glue_val -> glue_type -> abstract_val * interactive_env * name_type_ctx

  val unify_abstract_val :
    name Util.Namespan.namespan ->
    abstract_val ->
    abstract_val ->
    name Util.Namespan.namespan option

  val get_typed_computation :
    string -> in_channel -> computation * name_type_ctx

  (* We retrive a module declaration and its signature from the two in_channel taken as input.
     We evaluate the list of computation declarations into a list of value declarations together with the memory
     generated by this evaluation. *)
  val get_typed_ienv :
    in_channel ->
    in_channel ->
    interactive_env * Memory.memory * name_type_ctx * name_type_ctx
end

module type LANG_F = functor (OpLang : WITHNUP) ->
  LANG with type name = OpLang.name
