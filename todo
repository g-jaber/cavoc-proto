- [ ] Rename bipartite.ml into strategies.ml
  - [ ] Incorporate game-indexing ?
- [x] Remove the need for Lts.Interactive.INT, by only using Lts.Typing.Game and Lang.Interactive.LANG
- [x] Rework the product LTS by using Lts.Typing.Game
- [ ] Introduce the notion of History-enhancement as a functor from Typing.LTS to Typing.LTS  rather than a module of signature Hislts.HISLTS
- [x] Define a MOVETREE interface
- [ ] Implement a functor from MOVETREE to Lang.Interactive.LANG
- [x] Remove the need for CONT_NAMES
- [x] Add a Names submodule to the Moves interface
- [x] Remove the Int submodule of the Bipartite.INT_LTS signature
- [x] Design a specific Typing LTS for POGS
- [x] Provide an eval function rather than a compute_nf + abstract_nf in Lang.Interactive.LANG signature
- [ ] Rework infer_type_abstract_val in nup.ml to handle type name polarities
- [ ] Add a store typing context for moves
- [ ] Define a functor from MOVES to POLMOVES
- [x] Propose a specified signature NAMEDMOVES where move type is defined as name*a_nf
- [x] Add a Namectx signature
- [x] Create a specific signature Lang.Interactive.LANG_WITH_INIT 
- [x] Use Typectx for storectx
- [x] Create a module signature for renamings
- [x] Create a functor from Names and Types to Namectx
- [x] Make the type Namectx abstract in lang/
- [ ] Add a functor to aggregate two Typectx
- [ ] Rework Typectx.add
- [ ] Embed a Namectx module in AVAL
- [ ] Use TYPECTX interface in RefML/type_ctx.ml
- [ ] Make namectx abstract in RefML/nup.ml
- [ ] Switch to a presentation using De Bruijn indices